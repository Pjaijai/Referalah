create table "public"."fire" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "type" text not null,
    "ref_uuid" uuid not null,
    "created_by" uuid not null default auth.uid()
);


alter table "public"."fire" enable row level security;

CREATE INDEX fire_created_by_idx ON public.fire USING btree (created_by);

CREATE UNIQUE INDEX fire_pkey ON public.fire USING btree (id);

CREATE UNIQUE INDEX fire_ref_uuid_created_by_unique ON public.fire USING btree (ref_uuid, created_by);

alter table "public"."fire" add constraint "fire_pkey" PRIMARY KEY using index "fire_pkey";

alter table "public"."fire" add constraint "fire_ref_uuid_created_by_unique" UNIQUE using index "fire_ref_uuid_created_by_unique";

alter table "public"."fire" add constraint "fire_type_check" CHECK ((type = 'job_journey'::text)) not valid;

alter table "public"."fire" validate constraint "fire_type_check";

alter table "public"."fire" add constraint "public_fire_created_by_fkey" FOREIGN KEY (created_by) REFERENCES "user"(uuid) not valid;

alter table "public"."fire" validate constraint "public_fire_created_by_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.increment_job_journey_fire_count()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    IF NEW.type = 'job_journey' THEN
        UPDATE public.job_journey
        SET fire_count = fire_count + 1
        WHERE uuid = NEW.ref_uuid;
        
        IF NOT FOUND THEN
            RAISE NOTICE 'No job_journey found for ref_uuid: %', NEW.ref_uuid;
        END IF;
    END IF;
    RETURN NEW;
END;
$function$
;

grant insert on table "public"."fire" to "authenticated";

grant select on table "public"."fire" to "authenticated";


create policy "created own fire"
on "public"."fire"
as permissive
for insert
to authenticated
with check ((created_by = auth.uid()));


create policy "select own fires"
on "public"."fire"
as permissive
for select
to authenticated
using ((created_by = auth.uid()));


CREATE TRIGGER fire_job_journey_trigger AFTER INSERT ON public.fire FOR EACH ROW EXECUTE FUNCTION increment_job_journey_fire_count();


