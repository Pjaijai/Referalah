revoke update on table "public"."user" from "anon";

create table "public"."message_notification_queue" (
    "id" bigint generated by default as identity not null,
    "user_uuid" uuid not null,
    "message_uuid" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "status" character varying not null default 'pending'::character varying
);


CREATE UNIQUE INDEX message_notification_queue_id_key ON public.message_notification_queue USING btree (id);

CREATE UNIQUE INDEX message_notification_queue_pkey ON public.message_notification_queue USING btree (id);

alter table "public"."message_notification_queue" add constraint "message_notification_queue_pkey" PRIMARY KEY using index "message_notification_queue_pkey";

alter table "public"."message_notification_queue" add constraint "message_notification_queue_id_key" UNIQUE using index "message_notification_queue_id_key";

alter table "public"."message_notification_queue" add constraint "public_message_notification_queue_message_uuid_fkey" FOREIGN KEY (message_uuid) REFERENCES message(uuid) not valid;

alter table "public"."message_notification_queue" validate constraint "public_message_notification_queue_message_uuid_fkey";

alter table "public"."message_notification_queue" add constraint "public_message_notification_queue_user_uuid_fkey" FOREIGN KEY (user_uuid) REFERENCES "user"(uuid) not valid;

alter table "public"."message_notification_queue" validate constraint "public_message_notification_queue_user_uuid_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.insert_message_notification()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    notification_user_uuid UUID;
BEGIN
    -- Get the conversation details
    SELECT 
        CASE 
            WHEN NEW.sender_uuid = c.sender_uuid THEN c.receiver_uuid
            ELSE c.sender_uuid
        END INTO notification_user_uuid
    FROM conversation c
    WHERE c.uuid = NEW.conversation_uuid;

    -- Insert into message_notification_queue
    INSERT INTO message_notification_queue (user_uuid, message_uuid)
    VALUES (notification_user_uuid, NEW.uuid);

    RETURN NEW;
END;
$function$
;

grant delete on table "public"."message_notification_queue" to "anon";

grant insert on table "public"."message_notification_queue" to "anon";

grant references on table "public"."message_notification_queue" to "anon";

grant select on table "public"."message_notification_queue" to "anon";

grant trigger on table "public"."message_notification_queue" to "anon";

grant truncate on table "public"."message_notification_queue" to "anon";

grant update on table "public"."message_notification_queue" to "anon";

grant delete on table "public"."message_notification_queue" to "authenticated";

grant insert on table "public"."message_notification_queue" to "authenticated";

grant references on table "public"."message_notification_queue" to "authenticated";

grant select on table "public"."message_notification_queue" to "authenticated";

grant trigger on table "public"."message_notification_queue" to "authenticated";

grant truncate on table "public"."message_notification_queue" to "authenticated";

grant update on table "public"."message_notification_queue" to "authenticated";

grant delete on table "public"."message_notification_queue" to "service_role";

grant insert on table "public"."message_notification_queue" to "service_role";

grant references on table "public"."message_notification_queue" to "service_role";

grant select on table "public"."message_notification_queue" to "service_role";

grant trigger on table "public"."message_notification_queue" to "service_role";

grant truncate on table "public"."message_notification_queue" to "service_role";

grant update on table "public"."message_notification_queue" to "service_role";

CREATE TRIGGER on_message_created_notification AFTER INSERT ON public.message FOR EACH ROW EXECUTE FUNCTION insert_message_notification();


