drop trigger if exists "on_message_created_notification" on "public"."message";

drop function if exists "public"."insert_message_notification"();

create table "public"."notification" (
    "id" bigint generated by default as identity not null,
    "user_uuid" uuid not null,
    "type" text not null,
    "data" jsonb not null,
    "is_seen" boolean not null default false,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."notification" enable row level security;

CREATE INDEX idx_notification_user_uuid ON public.notification USING btree (user_uuid);

CREATE UNIQUE INDEX notification_pkey ON public.notification USING btree (id);

CREATE INDEX notification_user_uuid_idx ON public.notification USING btree (user_uuid);

alter table "public"."notification" add constraint "notification_pkey" PRIMARY KEY using index "notification_pkey";

alter table "public"."notification" add constraint "notification_user_uuid_fkey" FOREIGN KEY (user_uuid) REFERENCES "user"(uuid) ON DELETE CASCADE not valid;

alter table "public"."notification" validate constraint "notification_user_uuid_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.notify_on_message_insert()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    notification_user_uuid UUID;
    sender_username_val TEXT;
    has_document_val BOOLEAN;
BEGIN
    -- Get the recipient user UUID and message details
    SELECT 
        CASE 
            WHEN NEW.sender_uuid = c.sender_uuid THEN c.receiver_uuid 
            ELSE c.sender_uuid 
        END,
        u.username
    INTO notification_user_uuid, sender_username_val
    FROM conversation c
    JOIN public.user u ON NEW.sender_uuid = u.uuid  -- Assuming users table has uuid and username
    WHERE c.uuid = NEW.conversation_uuid;

    -- Check if document is not null
    has_document_val := NEW.document IS NOT NULL;

    -- Insert into the notification table directly
    INSERT INTO notification (
        user_uuid,
        type,
        data,
        created_at,
        is_seen
    ) VALUES (
        notification_user_uuid,
        'message',  -- Hardcoded notification type
        jsonb_build_object(
            'sender_username', sender_username_val,
            'has_document', has_document_val,
            'conversation_uuid', NEW.conversation_uuid,
            'message_uuid', NEW.uuid  -- Add the message UUID
        ),
        NEW.created_at,
        FALSE
    );

    RETURN NEW;
END;
$function$
;

grant select on table "public"."notification" to "authenticated";

grant delete on table "public"."notification" to "service_role";

grant insert on table "public"."notification" to "service_role";

grant references on table "public"."notification" to "service_role";

grant select on table "public"."notification" to "service_role";

grant trigger on table "public"."notification" to "service_role";

grant truncate on table "public"."notification" to "service_role";

grant update on table "public"."notification" to "service_role";

create policy "users_update_own_notification_status"
on "public"."notification"
as permissive
for update
to authenticated
using ((auth.uid() = user_uuid))
with check ((auth.uid() = user_uuid));


create policy "users_view_own_notifications"
on "public"."notification"
as permissive
for select
to authenticated
using ((auth.uid() = user_uuid));


CREATE TRIGGER trigger_notify_on_message AFTER INSERT ON public.message FOR EACH ROW EXECUTE FUNCTION notify_on_message_insert();


