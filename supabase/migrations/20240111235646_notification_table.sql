create type "public"."notification_type" as enum ('chat');

create table "public"."notification" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "uuid" uuid not null default gen_random_uuid(),
    "to_uuid" uuid not null,
    "body" text not null,
    "is_seen" boolean not null default false,
    "type" notification_type not null default 'chat'::notification_type
);


alter table "public"."notification" enable row level security;

CREATE UNIQUE INDEX notification_id_key ON public.notification USING btree (id);

CREATE UNIQUE INDEX notification_pkey ON public.notification USING btree (id);

CREATE UNIQUE INDEX notification_uuid_key ON public.notification USING btree (uuid);

alter table "public"."notification" add constraint "notification_pkey" PRIMARY KEY using index "notification_pkey";

alter table "public"."notification" add constraint "notification_id_key" UNIQUE using index "notification_id_key";

alter table "public"."notification" add constraint "notification_to_uuid_fkey" FOREIGN KEY (to_uuid) REFERENCES "user"(uuid) not valid;

alter table "public"."notification" validate constraint "notification_to_uuid_fkey";

alter table "public"."notification" add constraint "notification_uuid_key" UNIQUE using index "notification_uuid_key";

grant delete on table "public"."notification" to "anon";

grant insert on table "public"."notification" to "anon";

grant references on table "public"."notification" to "anon";

grant select on table "public"."notification" to "anon";

grant trigger on table "public"."notification" to "anon";

grant truncate on table "public"."notification" to "anon";

grant update on table "public"."notification" to "anon";

grant delete on table "public"."notification" to "authenticated";

grant insert on table "public"."notification" to "authenticated";

grant references on table "public"."notification" to "authenticated";

grant select on table "public"."notification" to "authenticated";

grant trigger on table "public"."notification" to "authenticated";

grant truncate on table "public"."notification" to "authenticated";

grant update on table "public"."notification" to "authenticated";

grant delete on table "public"."notification" to "service_role";

grant insert on table "public"."notification" to "service_role";

grant references on table "public"."notification" to "service_role";

grant select on table "public"."notification" to "service_role";

grant trigger on table "public"."notification" to "service_role";

grant truncate on table "public"."notification" to "service_role";

grant update on table "public"."notification" to "service_role";

create policy "Allow user update their own notificaiton"
on "public"."notification"
as permissive
for update
to anon, authenticated
using ((auth.uid() = to_uuid))
with check ((auth.uid() = to_uuid));


create policy "Enable insert for users based on user_id"
on "public"."notification"
as permissive
for select
to public
using ((auth.uid() = to_uuid));



